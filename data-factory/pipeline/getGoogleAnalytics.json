{
	"name": "getGoogleAnalytics",
	"properties": {
		"activities": [
			{
				"name": "GetTables",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "GoogleBigQuerySource",
						"query": "with cte as (\n  /* Cut table names into root and date part (lengths correspond to trailing _YYYYMMDD)*/\n  select      t.table_catalog, t.table_schema, t.table_name,\n              left(t.table_name, length(t.table_name) - 9) root_name,\n              right(t.table_name, 8) suffix,\n              t.table_type\n  FROM        `region-us`.INFORMATION_SCHEMA.TABLES t\n)\n\nselect    table_catalog, table_schema, table_name, root_name, left(suffix, 4) yr, substring(suffix, 5, 2) mon, right(suffix, 2) dy,\n               case when root_name in ('events') then 'batch' else 'full' end load_type\nfrom      cte\norder by  table_catalog, table_schema, table_name"
					},
					"dataset": {
						"referenceName": "GoogleBigQueryFND",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Loop Tables",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "GetTables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetTables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "LoadType",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().load_type",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "batch",
										"activities": [
											{
												"name": "BatchLoad",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "GoogleBigQuerySource",
														"query": {
															"value": "@concat('with recursive cte as (\n  /* Count and row_number by event_name and ordered with highest row count first */\n  SELECT    event_name, count(*) _count, row_number() over (order by count(*) desc) id\n  FROM      ', item().table_schema, '.', item().table_name, '\n  group by  event_name \n), rt as (\n  /* Conditional sum with prior row(s) until just before 1M, then start new running total */\n  select    id, event_name, _count, _count running_total, 1 group_id\n  from      cte\n  where     id = 1\n  union all\n  select    a.id, a.event_name, a._count,\n            case when a._count + b.running_total < 1000000 then a._count + b.running_total else a._count end running_total,\n            case when a._count + b.running_total < 1000000 then b.group_id else b.group_id + 1 end group_id\n  from      cte a\n  join      rt b on b.id = a.id - 1\n)\n\nselect ''', item().table_catalog, ''' table_catalog, ''', item().table_schema, ''' table_schema, ''', item().table_name, ''' table_name, id, group_id, event_name, _count, running_total\nfrom  rt\norder by group_id, id\n')",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "GoogleBigQueryFND",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "OpSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"schemaName": "dbo",
															"tableName": "event_count",
															"sqlFqdn": "localhost\\ACB",
															"dbName": "gbq_study",
															"userName": "AB092898@flooranddecor.com"
														}
													}
												]
											}
										]
									},
									{
										"value": "full",
										"activities": [
											{
												"name": "FullLoad",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "GoogleBigQuerySource",
														"query": {
															"value": "@concat('select * from ', item().table_catalog, '.', item().table_schema, '.', item().table_name)",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "GoogleBigQueryFND",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "AzPq",
														"type": "DatasetReference",
														"parameters": {
															"dsFilesystem": "datalake",
															"dsPath": {
																"value": "@concat('google_analytics/', item().table_catalog, '/', item().table_schema, '/', item().root_name, '/', item().yr, '/', item().mon, '/', item().dy)",
																"type": "Expression"
															},
															"dsFilename": {
																"value": "@concat(item().table_name, '.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "GetGbqObjects",
				"description": "Add any objects available in GBQ to the load control tracker.",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "GoogleBigQuerySource",
						"query": "select   t.table_catalog as TableCatalog, \n            t.table_schema as TableSchema, \n            t.table_name as TableName\nFROM  `region-us`.INFORMATION_SCHEMA.TABLES t\n"
					},
					"sink": {
						"type": "SqlServerSink",
						"preCopyScript": "truncate table stage.gbqObject",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "GoogleBigQueryFND",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "OpSqlTable",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": "stage",
							"tableName": "gbqObject",
							"sqlFqdn": "localhost\\ACB",
							"dbName": "LoadControl",
							"userName": "AB092898@flooranddecor.com"
						}
					}
				]
			},
			{
				"name": "GetLoadGroups",
				"description": "Determine what is needed to load:\n* Ignore objects already marked as loaded\n* Find groupings for tables over the limit",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "GetNewObjects",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "@concat('declare json nvarchar(max) = ', activity('GetGbqObjects').output.pipelineReturnValue, ';\n\nwith obj as (\n    select  TableCatalog, TableSchema, TableName, \n            case \n                when TableName like ''event%'' then ''event_name'' \n                else ', ' \n            end KeyField,\n            case \n                when TableName like ''event%'' then '' group by event_name '' \n                else '' \n            end GroupBy\n    from    openjson(json)\n        with (\n            TableCatalog nvarchar(255) ''$.TableCatalog'',\n            TableSchema nvarchar(255) ''$.TableSchema'',\n            TableName nvarchar(255) ''$.TableName''\n        ) s\n)\n\nselect string_agg(convert(nvarchar(max), sqlCmd), '' union all '') \nfrom (\n    select  sqlCmd = concat(''select '''', s.TableCatalog, '''' TableCatalog, '''', s.TableSchema, '''' TableSchema, '''', s.TableName, '''' TableName, '''',\ns.KeyField, '''' KeyField, count(*) RowCountSource from '',\ns.TableSchema, ''.'', s.TableName, '', s.GroupBy, '')\n    from    obj s\n    left join   dbo.GoogleBigQueryObjects ga on ga.TableCatalog = s.TableCatalog and ga.TableSchema = s.TableSchema and ga.TableName = s.TableName\n) r')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "OpSqlTable",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": "dbo",
							"tableName": "GoogleBigQueryObjejects",
							"sqlFqdn": "localhost\\ACB",
							"dbName": "LoadControl",
							"userName": "AB092898@flooranddecor.com"
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "GetNewObjects",
				"description": "Determine which Google Big Query objects have not yet been loaded.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GetRowCountQueries",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "declare @@json nvarchar(max) = @{activity('GetRowCountQueries').output.value}\nwith cte as (\n     select TableCatalog, TableSchema, TableName, Batch, RowCountSource\n     from open_json(@@json) \n        with (\n            TableCatalog nvarchar(255) '$.TableCatalog',\n            TableSchema nvarchar(255) '$.TableSchema',\n            TableName nvarchar(255) '$.TableName',\n            Batch nvarchar(2000) '$.Batch',\n            RowCountSource int '$.RowCountSource'\n        ) s\n), rt as (\n    /* Conditional sum with prior row(s) until just before 1M, then start new running total */\n    select      Id, Batch, RowCountSource, RowCountSource RunningTotal, 1 GroupId, \n                TableCatalog, TableSchema, TableName\n    from        cte\n    where       Id = 1\n    union all\n    select      a.Id, a.Batch, a.RowCountSource,\n                case when a.RowCountSource + b.RunningTotal < 1000000 then a.RowCountSource + b.RunningTotal else a.RowCountSource end RunningTotal,\n                case when a.RowCountSource + b.RunningTotal < 1000000 then b.GroupId else b.GroupId + 1 end GroupId,\n                TableCatalog, TableSchema, TableName\n    from        cte a\n    join        rt b on b.Id = a.Id - 1\n)\n\nselect      Id, GroupId, Batch, RowCountSource, RunningTotal,\n            TableCatalog, TableSchema, TableName\nfrom        rt\norder by    GroupId, Id",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "OpSqlTable",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": "dbo",
							"tableName": "gbqObjectToLoad",
							"sqlFqdn": "localhost\\ACB",
							"dbName": "LoadControl",
							"userName": "AB092898@flooranddecor.com"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "GetRowCountQueries",
				"description": "Generates a union all row-count set of queries for each object not yet loaded from Google",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GetGbqObjects",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": " select string_agg(SelectCmd, ' union all ') from dbo.gbqObjectToLoadCmd",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "OpSqlTable",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": "dbo",
							"tableName": "customer",
							"sqlFqdn": "localhost\\ACB",
							"dbName": "LoadControl",
							"userName": "AB092898@flooranddecor.com"
						}
					},
					"firstRowOnly": false
				}
			}
		],
		"annotations": []
	}
}