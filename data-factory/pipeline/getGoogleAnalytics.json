{
	"name": "getGoogleAnalytics",
	"properties": {
		"activities": [
			{
				"name": "GetTables",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "GoogleBigQuerySource",
						"query": "select      t.table_catalog, t.table_schema, t.table_name, t.table_type,\n               case when t.table_name like 'event%' then 'batch' else 'full' end load_type\nFROM        `region-us`.INFORMATION_SCHEMA.TABLES t\norder by    t.table_catalog, t.table_schema, t.table_name, t.table_type"
					},
					"dataset": {
						"referenceName": "GoogleBigQueryFND",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Loop Tables",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetTables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetTables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "LoadType",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().load_type",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "batch",
										"activities": [
											{
												"name": "BatchLoad",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "GoogleBigQuerySource",
														"query": {
															"value": "@concat('with recursive cte as (\n  /* Count and row_number by event_name and ordered with highest row count first */\n  SELECT    event_name, count(*) _count, row_number() over (order by count(*) desc) id\n  FROM      ', item().table_schema, '.', item().table_name, '\n  group by  event_name \n), rt as (\n  /* Conditional sum with prior row(s) until just before 1M, then start new running total */\n  select    id, event_name, _count, _count running_total, 1 group_id\n  from      cte\n  where     id = 1\n  union all\n  select    a.id, a.event_name, a._count,\n            case when a._count + b.running_total < 1000000 then a._count + b.running_total else a._count end running_total,\n            case when a._count + b.running_total < 1000000 then b.group_id else b.group_id + 1 end group_id\n  from      cte a\n  join      rt b on b.id = a.id - 1\n)\n\nselect ', item().table_catalog, ' table_catalog, ', item().table_schema, ' table_schema, ', item().table_name, ' table_name, id, group_id, event_name, _count, running_total\nfrom  rt\norder by group_id, id\n')",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "SqlServerSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "GoogleBigQueryFND",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "OpSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"schemaName": "dbo",
															"tableName": "event_count",
															"sqlFqdn": "localhost\\ACB",
															"dbName": "gbq_study",
															"userName": "AB092898@flooranddecor.com",
															"pwdSecretName": "WinAuthPwd",
															"akvBaseUrl": "https://akv-ab092898.vault.azure.net/",
															"pwd": "jjj"
														}
													}
												]
											}
										]
									},
									{
										"value": "full",
										"activities": [
											{
												"name": "FullLoad",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "GoogleBigQuerySource",
														"query": {
															"value": "@concat('select * from ', item().table_catalog, '.', item().table_schema, '.', item().table_name)",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "GoogleBigQueryFND",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "AzPq",
														"type": "DatasetReference",
														"parameters": {
															"dsFilesystem": "datalake",
															"dsPath": {
																"value": "@concat('google_analytics/', item().table_catalog, '/', item().table_schema)",
																"type": "Expression"
															},
															"dsFilename": {
																"value": "@concat(item().table_name, '.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"annotations": []
	}
}