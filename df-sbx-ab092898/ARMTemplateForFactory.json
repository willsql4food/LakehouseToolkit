{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-sbx-ab092898"
		},
		"AzDLStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzDLStorage'"
		},
		"AzSqlDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzSqlDb'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().serverName};Initial Catalog=@{linkedService().dbName}"
		},
		"GenericAzureSqlDatabaseMI_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GenericAzureSqlDatabaseMI'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().lsServerName};Initial Catalog=@{linkedService().lsDatabaseName}"
		},
		"OnpremSqlDb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OnpremSqlDb'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().serverFqdn};Initial Catalog=@{linkedService().dbName}"
		},
		"AzDLStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sadevdatalakehouse.dfs.core.windows.net/"
		},
		"AzKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akv-ab092898.vault.azure.net/"
		},
		"GenericAzureDataLakeStorageGen2KV_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().lsURL}"
		},
		"GenericAzureKeyVaultMI_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().lsBaseURL}"
		},
		"GenericDB2_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@{linkedService().lsSecretName}"
		},
		"GenericSFTP_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "@{linkedService().lsHost}"
		},
		"GenericSFTP_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().lsUserName}"
		},
		"OnpremSqlDb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().userName}"
		},
		"RestApi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseUrl}"
		},
		"sfdc_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://login.salesforce.com"
		},
		"sfdc_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "@{linkedService().userName}"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plSourceSchema": {
			"type": "string",
			"defaultValue": "stage"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plSourceTable": {
			"type": "string",
			"defaultValue": "PersonC"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetSchema": {
			"type": "string",
			"defaultValue": "dbo"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableRigid": {
			"type": "string",
			"defaultValue": "PersonRigid"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableFlexible": {
			"type": "string",
			"defaultValue": "PersonFlexible"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DL to OnPremSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzDLStorePq",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "Case",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "SevenLetterTees",
									"userName": "AB092898@flooranddecor.com"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzDLStorePq')]",
				"[concat(variables('factoryId'), '/datasets/OpSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SchemaDriftTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ConformTblRigid",
						"description": "Auto Deployed\nLoad data into target table without changing its structure.\nRisks: truncation, loss of precision, special characters.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.uspConformTable",
								"storedProcedureParameters": {
									"SourceSchema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plSourceSchema",
											"type": "Expression"
										}
									},
									"SourceTable": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plSourceTable",
											"type": "Expression"
										}
									},
									"TargetSchema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plTargetSchema",
											"type": "Expression"
										}
									},
									"TargetTable": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plTargetTableRigid",
											"type": "Expression"
										}
									},
									"Options": {
										"type": "String",
										"value": "{\"Perform DDL\": 0}"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzSqlDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "InsertScriptRigid",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ConformTblRigid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzSqlDb",
							"type": "LinkedServiceReference",
							"parameters": {
								"serverName": "sql-ab092898.database.windows.net",
								"dbName": "txn"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(activity('ConformTblRigid').output.firstRow.InsertCmd, ' ', activity('ConformTblRigid').output.firstRow.SelectCmd)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ConformTblFlexible",
						"description": "Change Target Table\nExecute the conform table stored procedure with Perform DML = 1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.uspConformTable",
								"storedProcedureParameters": {
									"SourceSchema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plSourceSchema",
											"type": "Expression"
										}
									},
									"SourceTable": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plSourceTable",
											"type": "Expression"
										}
									},
									"TargetSchema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plTargetSchema",
											"type": "Expression"
										}
									},
									"TargetTable": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.plTargetTableFlexible",
											"type": "Expression"
										}
									},
									"Options": {
										"type": "String",
										"value": "{\"Perform DDL\": 1}"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzSqlDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "InsertScriptFlexible",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ConformTblFlexible",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzSqlDb",
							"type": "LinkedServiceReference",
							"parameters": {
								"serverName": "sql-ab092898.database.windows.net",
								"dbName": "txn"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(activity('ConformTblFlexible').output.firstRow.InsertCmd, ' ', activity('ConformTblFlexible').output.firstRow.SelectCmd)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "CopyPersonFlexible",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "InsertScriptFlexible",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select top 10 FirstName, reverse(LastName) LastName from dbo.PersonFlexible",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzSqlDb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "PersonFlexible",
									"sqlFqdn": "sql-ab092898.database.windows.net",
									"dbName": "txn"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"plSourceSchema": {
						"type": "string",
						"defaultValue": "Stage"
					},
					"plSourceTable": {
						"type": "string",
						"defaultValue": "PersonA"
					},
					"plTargetSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"plTargetTableRigid": {
						"type": "string",
						"defaultValue": "PersonRigid"
					},
					"plTargetTableFlexible": {
						"type": "string",
						"defaultValue": "PersonFlexible"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzSqlDb')]",
				"[concat(variables('factoryId'), '/linkedServices/AzSqlDb')]",
				"[concat(variables('factoryId'), '/datasets/AzSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StudyMMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getColumnList",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select \n  t.TABLE_CAT\n, t.TABLE_SCHEM\n, s.SCHEMA_TEXT\n, t.TABLE_NAME\n, t.TABLE_TYPE\n, t.REMARKS\n, t.TYPE_CAT\n, t.TYPE_SCHEM\n, t.TYPE_NAME as table_type_name\n, t.SELF_REFERENCING_COL_NAME\n, t.REF_GENERATION\n, t.DBNAME\n, t.TABLE_TEXT\n, c.COLUMN_NAME\n, c.DATA_TYPE\n, c.TYPE_NAME as column_type_name\n, c.COLUMN_SIZE\n, c.BUFFER_LENGTH\n, c.DECIMAL_DIGITS\n, c.NUM_PREC_RADIX\n, c.NULLABLE\n, c.REMARKS as column_remarks\n, c.COLUMN_DEF\n, c.SQL_DATA_TYPE\n, c.SQL_DATETIME_SUB\n, c.CHAR_OCTET_LENGTH\n, c.ORDINAL_POSITION\n, c.IS_NULLABLE\n, c.JDBC_DATA_TYPE\n, c.SCOPE_CATALOG\n, c.SCOPE_SCHEMA\n, c.SCOPE_TABLE\n, c.SOURCE_DATA_TYPE\n, c.PSEUDO_COLUMN\n, c.COLUMN_TEXT\n, c.SYSTEM_COLUMN_NAME\n, c.I_DATA_TYPE\n, c.HIDDEN\n, c.HAS_DEFAULT\n, c.SOURCE_TYPE_NAME\n, c.SOURCE_SQL_DATA_TYPE\n, c.SOURCE_JDBC_DATA_TYPE\n, '@{utcNow()}' as measure_time\nFROM sysibm.SQLTABLES t\njoin sysibm.SQLSCHEMAS s on s.TABLE_CAT = t.TABLE_CAT and s.TABLE_SCHEM = t.TABLE_SCHEM\njoin sysibm.SQLcolumns c on c.TABLE_CAT = t.TABLE_CAT and c.TABLE_SCHEM = t.TABLE_SCHEM and c.TABLE_NAME = t.TABLE_NAME\nwhere (t.table_name in ('POMHDR' ,\n'POMCAN',\n'POMHST',\n'POSTAT',\n'POMDTL',\n'POMDSQ',\n'POMXTK',\n'EDAASNI')\nor t.table_name like 'INV%' and t.table_name not like '%DUPE%')\nand s.TABLE_SCHEM IN ('MM760LIB', 'MMLIBARCH', 'QGPL', 'STKUPD')\n\n/* \n-- Collect these:\n+ MM760LIB\tMMS 7.6.0 Database Library\n+ MMLIBARCH\tMM760LIB Archive Library\n+ QGPL\t    General Purpose Library\n+ STKUPD\t  Library for Stock Ledger Level Clearing\n\n-- Ignore these:\n- POMRST910\tnull\n- MM760DVL\tMMS 7.6.0 Development Database Files\n- MM760QAL\tMMS 7.6.0 QA Database Files\n */",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Db2KV",
								"type": "DatasetReference",
								"parameters": {
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@pipeline().parameters.prmSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLBronzeParquetKVFile",
								"type": "DatasetReference",
								"parameters": {
									"dsURL": "https://staab09289802.dfs.core.windows.net",
									"dsSecretName": "key-staab09289802",
									"dsFileSystem": "datalake",
									"dsDirectory": {
										"value": "@{pipeline().parameters.prmPath}/Audit",
										"type": "Expression"
									},
									"dsFileName": "TableDefinitions.parquet",
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LoopTables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "getTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('getTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SampleRows",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "Db2Source",
											"query": {
												"value": "select * from @{item().table_schem}.@{item().table_name} limit 1000",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Db2KV",
											"type": "DatasetReference",
											"parameters": {
												"dsKVBaseURL": {
													"value": "@pipeline().parameters.prmKVBaseURL",
													"type": "Expression"
												},
												"dsSecretName": {
													"value": "@pipeline().parameters.prmSecretName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLBronzeParquetKVFile",
											"type": "DatasetReference",
											"parameters": {
												"dsURL": "https://staab09289802.dfs.core.windows.net",
												"dsSecretName": "key-staab09289802",
												"dsFileSystem": "datalake",
												"dsDirectory": {
													"value": "@pipeline().parameters.prmPath",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@{item().table_schem}.@{item().table_name}.parquet",
													"type": "Expression"
												},
												"dsKVBaseURL": {
													"value": "@pipeline().parameters.prmKVBaseURL",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "CountRows",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "Db2Source",
											"query": {
												"value": "select '@{item().table_schem}' table_schema, '@{item().table_name}' table_name, count(*) num_rows, '@{utcNow()}' measure_time from @{item().table_schem}.@{item().table_name}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Db2KV",
											"type": "DatasetReference",
											"parameters": {
												"dsKVBaseURL": {
													"value": "@pipeline().parameters.prmKVBaseURL",
													"type": "Expression"
												},
												"dsSecretName": {
													"value": "@pipeline().parameters.prmSecretName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLBronzeParquetKVFile",
											"type": "DatasetReference",
											"parameters": {
												"dsURL": "https://staab09289802.dfs.core.windows.net",
												"dsSecretName": "key-staab09289802",
												"dsFileSystem": "datalake",
												"dsDirectory": {
													"value": "@{pipeline().parameters.prmPath}/Audit/Raw",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@{item().table_schem}.@{item().table_name}.@{formatDateTime(utcNow(), 'YYYY-mm-dd')}.parquet",
													"type": "Expression"
												},
												"dsKVBaseURL": {
													"value": "@pipeline().parameters.prmKVBaseURL",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "getTableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "select        t.table_schem, t.table_name\nFROM       sysibm.SQLTABLES t \nwhere       t.table_name in (\n'EDAASNI', \n'INVADI', \n'INVALC', \n'INVATD', \n'INVATR', \n'INVAUD', \n'INVAVG', \n'INVBAL', \n'INVBALQ1', \n'INVBALQ2', \n'INVBLX', \n'INVCAJ', \n'INVCAL', \n'INVCALDS', \n'INVCBF', \n'INVCBL', \n'INVCBX', \n'INVCCD', \n'INVCCH', \n'INVCCS', \n'INVCDL', \n'INVCDT', \n'INVCHS', \n'INVCHS1', \n'INVCHS2', \n'INVCHS3', \n'INVCMD', \n'INVCMH', \n'INVCMM', \n'INVCPP', \n'INVCPR', \n'INVCQE', \n'INVCQM', \n'INVCYS', \n'INVCZN', \n'INVCZS', \n'INVDAT', \n'INVDATIKB', \n'INVDFT', \n'INVDLT', \n'INVDPT', \n'INVDPTDS', \n'INVDSC', \n'INVDSCDS', \n'INVDSK', \n'INVDSS', \n'INVEBF', \n'INVEDT', \n'INVEFC', \n'INVEHC', \n'INVEHD', \n'INVEHH', \n'INVEHS', \n'INVEHW', \n'INVEMD', \n'INVEMH', \n'INVEMM', \n'INVENX', \n'INVEPD', \n'INVEPH', \n'INVEPR', \n'INVEQE', \n'INVEQM', \n'INVEST', \n'INVETP', \n'INVEUP', \n'INVEVA', \n'INVEVC', \n'INVEVD', \n'INVEVH', \n'INVEWD', \n'INVEWS', \n'INVEXC', \n'INVFIN', \n'INVFINDS', \n'INVGFM', \n'INVGHD', \n'INVGLI', \n'INVGPC', \n'INVGPD', \n'INVGPM', \n'INVGPO', \n'INVGPS', \n'INVGPT', \n'INVGPTED1', \n'INVGPTED2', \n'INVGRH', \n'INVGRS', \n'INVGSF', \n'INVGSL', \n'INVHAJ', \n'INVHLD', \n'INVHLDDS', \n'INVHLH', \n'INVHLHDS', \n'INVHMG', \n'INVHST', \n'INVHST1', \n'INVHST2', \n'INVHST3', \n'INVHSW', \n'INVIFG', \n'INVINT', \n'INVJOB', \n'INVLBL', \n'INVLTX', \n'INVMBD', \n'INVMBH', \n'INVMDL', \n'INVMFG', \n'INVMOD', \n'INVMSA', \n'INVMSADS', \n'INVMST', \n'INVMSTDS', \n'INVMSW', \n'INVMTA', \n'INVMTADS', \n'INVMVA', \n'INVOAD', \n'INVOADDS', \n'INVOAT', \n'INVOATDS', \n'INVOHF', \n'INVOICE_LINKING_TABLE', \n'INVOPN', \n'INVOPNDS', \n'INVORD', \n'INVPDQ', \n'INVPFG', \n'INVPLN', \n'INVPME', \n'INVPMK', \n'INVPOS', \n'INVPPD', \n'INVPPE', \n'INVPPH', \n'INVPPW', \n'INVPRF', \n'INVPRW', \n'INVPST', \n'INVRPB', \n'INVRSN', \n'INVSCD', \n'INVSCE', \n'INVSCP', \n'INVSEA', \n'INVSET', \n'INVSFM', \n'INVSHD', \n'INVSKG', \n'INVSKU', \n'INVSKUDS', \n'INVSLG', \n'INVSMG', \n'INVSPC', \n'INVSPL', \n'INVSPLDS', \n'INVSSK', \n'INVSTD', \n'INVSTDDS', \n'INVSTK', \n'INVSTX', \n'INVSUD', \n'INVSUH', \n'INVSUM', \n'INVTIK', \n'INVTRN', \n'INVTRNCA', \n'INVTRNCM', \n'INVTRNDW', \n'INVTRNER', \n'INVTRNES', \n'INVTRNET', \n'INVTRNHD', \n'INVTRNMC', \n'INVTRNPI', \n'INVTRNRP', \n'INVTRNSA', \n'INVTRNSE', \n'INVTRNSF', \n'INVTRNSL', \n'INVTRNST', \n'INVTRNSY', \n'INVTRNVT', \n'INVUMR', \n'INVUNP', \n'INVUPC', \n'INVUPCDS', \n'INVUPR', \n'INVVAD', \n'INVVAH', \n'INVVAT', \n'INVVBL', \n'INVVEN', \n'INVVENDS', \n'INVWFC', \n'INVWSP', \n'INVXCA', \n'INVXSK', \n'INVZAJ', \n'INVZON', \n'POMDSQ', \n'POMDTL', \n'POMHDR', \n'POMXTK', \n'POMCAN', \n'POMHST', \n'MSTFLD'\n)\n    and     t.table_schem in ('MM760LIB')"
							},
							"dataset": {
								"referenceName": "Db2KV",
								"type": "DatasetReference",
								"parameters": {
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@pipeline().parameters.prmSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "MergeRowCounts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LoopTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": {
										"value": "@{pipeline().parameters.prmPath}/Audit/Raw",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DLBronzeParquetKV",
								"type": "DatasetReference",
								"parameters": {
									"dsURL": "https://staab09289802.dfs.core.windows.net",
									"dsSecretName": "key-staab09289802",
									"dsFileSystem": "datalake",
									"dsDirectory": {
										"value": "@{pipeline().parameters.prmPath}/Audit/Raw",
										"type": "Expression"
									},
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLBronzeParquetKVFile",
								"type": "DatasetReference",
								"parameters": {
									"dsURL": "https://staab09289802.dfs.core.windows.net",
									"dsSecretName": "key-staab09289802",
									"dsFileSystem": "datalake",
									"dsDirectory": {
										"value": "@{pipeline().parameters.prmPath}/Audit",
										"type": "Expression"
									},
									"dsFileName": {
										"value": "@{formatDateTime(utcNow(), 'yyyyMMdd-HHmm')}_row_counts.parquet",
										"type": "Expression"
									},
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "getTimestamps",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "select 'S10F8F6P' AS TABLE_CAT, 'AHLIB' AS TABLE_SCHEM, 'POMHDR' AS TABLE_NAME, 'PURCHASE ORDER HEADER FILE' AS TABLE_TEXT, 'POEDAT' AS COLUMN_NAME, 'Entry Date' AS COLUMN_TEXT\n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT) AS MAX_DATE, '@{utcNow()}' AS MEASURE_TIME\nfrom AHLIB.POMHDR \nunion select 'S10F8F6P', 'AHLIB', 'POMHDR', 'PURCHASE ORDER HEADER FILE',     'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom AHLIB.POMHDR \nunion select 'S10F8F6P', 'MM760DVL', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POEDAT', 'Entry Date' \n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT), '@{utcNow()}'\nfrom MM760DVL.POMHDR \nunion select 'S10F8F6P', 'MM760DVL', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom MM760DVL.POMHDR \nunion select 'S10F8F6P', 'MM760LIB', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POEDAT', 'Entry Date' \n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT), '@{utcNow()}'\nfrom MM760LIB.POMHDR \nunion select 'S10F8F6P', 'MM760LIB', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom MM760LIB.POMHDR \nunion select 'S10F8F6P', 'MM760QAL', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POEDAT', 'Entry Date' \n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT), '@{utcNow()}'\nfrom MM760QAL.POMHDR \nunion select 'S10F8F6P', 'MM760QAL', 'POMHDR', 'PURCHASE ORDER HEADER FILE',  'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom MM760QAL.POMHDR \nunion select 'S10F8F6P', 'MMLIBARCH', 'POMHDR', 'PURCHASE ORDER HEADER FILE', 'POEDAT', 'Entry Date' \n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT), '@{utcNow()}'\nfrom MMLIBARCH.POMHDR \nunion select 'S10F8F6P', 'MMLIBARCH', 'POMHDR', 'PURCHASE ORDER HEADER FILE', 'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom MMLIBARCH.POMHDR \nunion select 'S10F8F6P', 'POMRST910', 'POMHDR', 'PURCHASE ORDER HEADER FILE', 'POEDAT', 'Entry Date' \n, MIN(POEDAT) as MIN_DATE, MAX(POEDAT), '@{utcNow()}'\nfrom POMRST910.POMHDR \nunion select 'S10F8F6P', 'POMRST910', 'POMHDR', 'PURCHASE ORDER HEADER FILE', 'POLCHG', 'Last Change Date'\n, MIN(POLCHG) as MIN_DATE, MAX(POLCHG), '@{utcNow()}'\nfrom POMRST910.POMHDR \nunion select 'S10F8F6P', 'MM760LIB', 'POMXTK', 'PO Reason Code trackingfile', 'TKDATE', 'Tracking Date' \n, MIN(TKDATE) as MIN_DATE, MAX(TKDATE), '@{utcNow()}'\nfrom MM760LIB.POMXTK \n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Db2KV",
								"type": "DatasetReference",
								"parameters": {
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@pipeline().parameters.prmSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLBronzeParquetKVFile",
								"type": "DatasetReference",
								"parameters": {
									"dsURL": "https://staab09289802.dfs.core.windows.net",
									"dsSecretName": "key-staab09289802",
									"dsFileSystem": "datalake",
									"dsDirectory": {
										"value": "@{pipeline().parameters.prmPath}/Audit",
										"type": "Expression"
									},
									"dsFileName": {
										"value": "@{formatDateTime(utcNow(), 'yyyyMMdd-HHmm')}_date_ranges.parquet",
										"type": "Expression"
									},
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "getTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "select current timestamp, current timezone from sysibm.sysdummy1"
							},
							"dataset": {
								"referenceName": "Db2KV",
								"type": "DatasetReference",
								"parameters": {
									"dsKVBaseURL": {
										"value": "@pipeline().parameters.prmKVBaseURL",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@pipeline().parameters.prmSecretName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"prmKVBaseURL": {
						"type": "string",
						"defaultValue": "https://akv-ab092898.vault.azure.net/"
					},
					"prmSecretName": {
						"type": "string",
						"defaultValue": "MMS-PROD"
					},
					"prmPath": {
						"type": "string",
						"defaultValue": "bronze/MMS_PROD"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Db2KV')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKVFile')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getGoogleAnalytics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop Batches",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_gbqLoadBatches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_gbqLoadBatches').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "BatchToParquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 300,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "DestFile",
											"value": "@{item().FileName}"
										},
										{
											"name": "Query",
											"value": "@{item().SelectCmd}"
										},
										{
											"name": "TableName",
											"value": "@{item().TableName}"
										},
										{
											"name": "Batch",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "GoogleBigQueryV2Source",
											"query": {
												"value": "@item().SelectCmd",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GoogleBigQueryDirect",
											"type": "DatasetReference",
											"parameters": {
												"dsBaseURL": "https://akv-ab092898.vault.azure.net/",
												"dsSecretName": "gbq-fnd-cloud-project"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLBronzeParquetKVFile",
											"type": "DatasetReference",
											"parameters": {
												"dsURL": "https://staab09289802.dfs.core.windows.net",
												"dsSecretName": "key-staab09289802",
												"dsFileSystem": "datalake",
												"dsDirectory": {
													"value": "bronze/GoogleAnalytics/@{item().FilePath}",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@{item().FileName}",
													"type": "Expression"
												},
												"dsKVBaseURL": "https://akv-ab092898.vault.azure.net/"
											}
										}
									]
								},
								{
									"name": "LogFinish",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "BatchToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabaseMI",
										"type": "LinkedServiceReference",
										"parameters": {
											"lsServerName": {
												"value": "@variables('varLCSQLServer')",
												"type": "Expression"
											},
											"lsDatabaseName": {
												"value": "@variables('varLCSQLDatabase')",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update  dbo.gbqWatermark\nset     LoadedDateUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        DestinationUri = 'datalake/bronze/@{item().FilePath}/@{item().FileName}',\n        RowCountDest = @{activity('BatchToParquet').output.rowsCopied} \nwhere   TableCatalog = '@{item().TableCatalog}'\n    and TableSchema = '@{item().TableSchema}'\n    and TableName = '@{item().TableName}'\n    and BatchId = @{item().BatchId}\n    @{if(equals(item().SubBatchId, null), '', concat(' and SubBatchId = ', item().SubBatchId))}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Get_gbqObject",
						"description": "Get all objects available in GBQ and stage them in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogJobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": "select   t.table_catalog as TableCatalog, \n            t.table_schema as TableSchema, \n            t.table_name as TableName\nFROM  `region-us`.INFORMATION_SCHEMA.TABLES t\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from [stage].[gbqObject]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": "https://akv-ab092898.vault.azure.net/",
									"dsSecretName": "gbq-fnd-cloud-project"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObject"
								}
							}
						]
					},
					{
						"name": "Get_gbqLoadBatches",
						"description": "Get the final list of batches to load, their file paths and names.\nFeed this to a load loop.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_gbqColumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.uspGetGbqLoadBatches",
								"storedProcedureParameters": {
									"PipelineExecutionId": {
										"type": "Int32",
										"value": {
											"value": "@{activity('LogJobStart').output.value[0].Id}",
											"type": "Expression"
										}
									},
									"RowsLimit": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.BatchRowLimit",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_RowCountQueries",
						"description": "Builds a set of queries to find the row count in each Google object not yet loaded.  Applies Batch to objects anticipated to exceed query return limit imposed by Google (1M rows as of 2024-01)",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select count(*) numBatches, string_agg(CountCmd, ' union all ') CountCmd from dbo.gbqObjectToLoadCmd",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqObjectDetail",
						"description": "Execute query and store results in stage table in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_RowCountQueries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": {
									"value": "@if(greater(activity('Get_RowCountQueries').output.value[0].numBatches, 0), \nactivity('Get_RowCountQueries').output.value[0].CountCmd, 'select ''na'' TableCatalog, ''na'' TableSchema, ''na'' TableName, 0 RowCountSource')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from [stage].[gbqObjectDetail]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": "https://akv-ab092898.vault.azure.net/",
									"dsSecretName": "gbq-fnd-cloud-project"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObjectDetail"
								}
							}
						]
					},
					{
						"name": "LogJobFinish",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Loop Batches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@variables('varLCSQLServer')",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@variables('varLCSQLDatabase')",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = @{activity('Get_RowCountQueries').output.value[0].numBatches},\n        StatusMessage = 'Succeeded'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LogJobStart",
						"description": "Record the Pipeline start in LoadControl and capture the Id of the row for use in auditing.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "insert into dbo.adfPipelineExecution (PipelineName, RunId, StartTimeUtc, StatusMessage)\noutput inserted.Id\nselect '@{pipeline().Pipeline}', '@{pipeline().RunId}', '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}', 'In Progress'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LogJobFail_GetObjDetail",
						"description": "Log failure at Get_gbqObjectDetail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@variables('varLCSQLServer')",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@variables('varLCSQLDatabase')",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = -1,\n        StatusMessage = 'Failed'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get_ColumnQuery",
						"description": "Builds a query to run against Google to find the column definition for each Google object not yet loaded.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "with cte as (\r\n    select      gbqCondition = convert(nvarchar(max), concat('table_catalog = ''', TableCatalog, '''', ' and table_schema = ''', TableSchema, '''', ' and table_name = ''', TableName, '''')),\r\n                sqlCondition = convert(nvarchar(max), concat('TableCatalog = ''', TableCatalog, '''', ' and TableSchema = ''', TableSchema, '''', ' and TableName = ''', TableName, '''')) \r\n    from        dbo.gbqObjectToLoad\r\n    group by    TableCatalog, TableSchema, TableName\r\n)\r\nselect      gbqSelectCmd = 'select table_catalog as TableCatalog, table_schema as TableSchema, table_name as TableName, column_name as  ColumnName, ordinal_position as  ColumnId, data_type as DataType '\r\n        +   'from `region-us`.INFORMATION_SCHEMA.COLUMNS c where ' + string_agg(gbqCondition, ' or '),\r\n            sqlDeleteCmd = 'delete from dbo.gbqColumn where ' + string_agg(sqlCondition, ' or ')\r\nfrom        cte",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqColumn",
						"description": "Get the column definitions of each object to load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_ColumnQuery",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": {
									"value": "@if(greater(activity('Get_ColumnQuery').output.count, 0), \nactivity('Get_ColumnQuery').output.value[0].gbqSelectCmd, 'select ''na'' as TableCatalog, ''na'' as TableSchema, ''na'' as TableName, ''na'' as ColumnName, 0 as ColumnId, ''na'' as DataType')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@if(greater(activity('Get_ColumnQuery').output.count, 0), \nactivity('Get_ColumnQuery').output.value[0].sqlDeleteCmd, 'select ''Nothing to remove'' as AdfMessage')\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": "https://akv-ab092898.vault.azure.net/",
									"dsSecretName": "gbq-fnd-cloud-project"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									},
									"dsSchema": "dbo",
									"dsTable": "gbqColumn"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BatchRowLimit": {
						"type": "int",
						"defaultValue": 1000000
					}
				},
				"variables": {
					"varLCSQLServer": {
						"type": "String",
						"defaultValue": "sql-ab092898.database.windows.net"
					},
					"varLCSQLDatabase": {
						"type": "String",
						"defaultValue": "LoadControl"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GoogleBigQueryDirect')]",
				"[concat(variables('factoryId'), '/datasets/LoadControlTable')]",
				"[concat(variables('factoryId'), '/datasets/WatermarkMI')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabaseMI')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKVFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getGoogleBigQuery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop Batches",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_gbqLoadBatches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_gbqLoadBatches').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "BatchToParquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 300,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "DestFile",
											"value": "@{item().FileName}"
										},
										{
											"name": "Query",
											"value": "@{item().SelectCmd}"
										},
										{
											"name": "TableName",
											"value": "@{item().TableName}"
										},
										{
											"name": "Batch",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "GoogleBigQueryV2Source",
											"query": {
												"value": "@item().SelectCmd",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GoogleBigQueryDirect",
											"type": "DatasetReference",
											"parameters": {
												"dsBaseURL": {
													"value": "@pipeline().globalParameters.BronzeIngestionKvUrl",
													"type": "Expression"
												},
												"dsSecretName": {
													"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsSecretName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLBronzeParquetKVFile",
											"type": "DatasetReference",
											"parameters": {
												"dsURL": {
													"value": "@activity('Get Pipeline Parameters').output.firstRow.SinkdsURL",
													"type": "Expression"
												},
												"dsSecretName": {
													"value": "@activity('Get Pipeline Parameters').output.firstRow.SinkdsSecretName",
													"type": "Expression"
												},
												"dsFileSystem": {
													"value": "@activity('Get Pipeline Parameters').output.firstRow.SinkdsFileSystem",
													"type": "Expression"
												},
												"dsDirectory": {
													"value": "@{activity('Get Pipeline Parameters').output.firstRow.SinkdsDirectory}/@{item().FilePath}",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@{item().FileName}",
													"type": "Expression"
												},
												"dsKVBaseURL": {
													"value": "@pipeline().globalParameters.BronzeIngestionKvUrl",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LogFinish",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "BatchToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabaseMI",
										"type": "LinkedServiceReference",
										"parameters": {
											"lsServerName": {
												"value": "@pipeline().globalParameters.gpWMSQL",
												"type": "Expression"
											},
											"lsDatabaseName": {
												"value": "@pipeline().globalParameters.gpWMDatabase",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update  dbo.gbqWatermark\nset     LoadedDateUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        DestinationUri = 'datalake/bronze/@{item().FilePath}/@{item().FileName}',\n        RowCountDest = @{activity('BatchToParquet').output.rowsCopied} \nwhere   TableCatalog = '@{item().TableCatalog}'\n    and TableSchema = '@{item().TableSchema}'\n    and TableName = '@{item().TableName}'\n    and BatchId = @{item().BatchId}\n    @{if(equals(item().SubBatchId, null), '', concat(' and SubBatchId = ', item().SubBatchId))}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Get_gbqObject",
						"description": "Get all objects available in GBQ and stage them in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogJobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": {
									"value": "select   table_catalog as TableCatalog, table_schema as TableSchema, table_name as TableName, partition_id as PartitionId, total_rows as TotalRows, last_modified_time as LastModifiedTime\nFROM  @{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}.@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}.INFORMATION_SCHEMA.PARTITIONS @{if(greater(pipeline().parameters.DataAgeLimitHours, 0), concat('where last_modified_time > timestamp(parse_datetime(''%Y-%m-%dT%H:%M:%E*SZ'', ''', addHours(pipeline().TriggerTime, mul(-1, pipeline().parameters.DataAgeLimitHours)), '''))'), '')}\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "delete from [stage].[gbqObject] where TableCatalog = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}' and TableSchema = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}'",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": {
										"value": "@pipeline().globalParameters.BronzeIngestionKvUrl",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObject"
								}
							}
						]
					},
					{
						"name": "Get_gbqLoadBatches",
						"description": "Get the final list of batches to load, their file paths and names.\nFeed this to a load loop.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_gbqColumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.uspGetGbqLoadBatches",
								"storedProcedureParameters": {
									"PipelineExecutionId": {
										"type": "Int32",
										"value": {
											"value": "@{activity('LogJobStart').output.value[0].Id}",
											"type": "Expression"
										}
									},
									"RowsLimit": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.BatchRowLimit",
											"type": "Expression"
										}
									},
									"TableCatalog": {
										"type": "String",
										"value": {
											"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog",
											"type": "Expression"
										}
									},
									"TableSchema": {
										"value": {
											"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_RowCountQueries",
						"description": "Builds a set of queries to find the row count in each Google object not yet loaded.  Applies Batch to objects anticipated to exceed query return limit imposed by Google (1M rows as of 2024-01)",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  count(*) numBatches\n    ,   string_agg(convert(nvarchar(max), CountCmd), ' union all ') CountCmd\n    ,   string_agg(convert(nvarchar(max), TableName), ',') TableList \nfrom    dbo.gbqObjectToLoadCmd \nwhere TableCatalog = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}' and TableSchema = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqObjectDetail",
						"description": "Execute query and store results in stage table in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_RowCountQueries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": {
									"value": "@if(greater(activity('Get_RowCountQueries').output.value[0].numBatches, 0), \nactivity('Get_RowCountQueries').output.value[0].CountCmd, 'select ''na'' TableCatalog, ''na'' TableSchema, ''na'' TableName, 0 RowCountSource')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "delete from [stage].[gbqObjectDetail] where TableCatalog = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}' and TableSchema = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}'",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": {
										"value": "@pipeline().globalParameters.BronzeIngestionKvUrl",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObjectDetail"
								}
							}
						]
					},
					{
						"name": "LogJobFinish",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "IfDataWasLoaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@pipeline().globalParameters.gpWMSQL",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@pipeline().globalParameters.gpWMDatabase",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = @{activity('Get_RowCountQueries').output.value[0].numBatches},\n        StatusMessage = 'Succeeded'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LogJobStart",
						"description": "Record the Pipeline start in LoadControl and capture the Id of the row for use in auditing.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Pipeline Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "insert into dbo.adfPipelineExecution (PipelineName, RunId, StartTimeUtc, StatusMessage, Parameters)\noutput inserted.Id\nselect '@{pipeline().Pipeline}', '@{pipeline().RunId}', '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}', 'In Progress', Parameters = (select '@{pipeline().parameters.BatchRowLimit}' as BatchRowLimit, '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}' as TableCatalog, '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}' as TableSchema for json path)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LogJobFail_GetObjDetail",
						"description": "Log failure at Get_gbqObjectDetail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@pipeline().globalParameters.gpWMSQL",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@pipeline().globalParameters.gpWMDatabase",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = -1,\n        StatusMessage = 'Failed'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get_ColumnQuery",
						"description": "Builds a query to run against Google to find the column definition for each Google object not yet loaded.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "/* This runs on SQL Server (LoadControl)*/\nwith cte as (\n    select\n        /* Build WHERE condition for query on GBQ  */\n        gbqCondition = convert(nvarchar(max), concat('table_name = ''', TableName, '''')),\n        /* Build WHERE condition for query on SQL  */\n        sqlCondition = convert(nvarchar(max), concat('TableCatalog = ''', TableCatalog, ''' and TableSchema = ''', TableSchema, ''' and TableName = ''', TableName, '''')) \n    from dbo.gbqObjectToLoad\n    where TableCatalog = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}' and TableSchema = '@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}'\n    group by    TableCatalog, TableSchema, TableName\n)\nselect      gbqSelectCmd = 'select table_catalog as TableCatalog, table_schema as TableSchema, table_name as TableName, column_name as ColumnName, coalesce(ordinal_position, -1) as ColumnId, data_type as DataType, cast(case when is_partitioning_column = ''YES'' then 1 else 0 end as boolean) as IsPartitioningColumn from @{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableCatalog}.@{activity('Get Pipeline Parameters').output.firstRow.SourcedsTableSchema}.INFORMATION_SCHEMA.COLUMNS c where ' + string_agg(gbqCondition, ' or '),\n            sqlDeleteCmd = 'delete from dbo.gbqColumn where ' + string_agg(sqlCondition, ' or ')\nfrom        cte",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqColumn",
						"description": "Get the column definitions of each object to load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_ColumnQuery",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQueryV2Source",
								"query": {
									"value": "@if(greater(activity('Get_ColumnQuery').output.count, 0), \nactivity('Get_ColumnQuery').output.value[0].gbqSelectCmd, 'select ''na'' as StorageRegion, ''na'' as TableCatalog, ''na'' as TableSchema, ''na'' as TableName, ''na'' as ColumnName, 0 as ColumnId, ''na'' as DataType')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@if(greater(activity('Get_ColumnQuery').output.count, 0), \nactivity('Get_ColumnQuery').output.value[0].sqlDeleteCmd, 'select ''Nothing to remove'' as AdfMessage')\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryDirect",
								"type": "DatasetReference",
								"parameters": {
									"dsBaseURL": {
										"value": "@pipeline().globalParameters.BronzeIngestionKvUrl",
										"type": "Expression"
									},
									"dsSecretName": {
										"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsSecretName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									},
									"dsSchema": "dbo",
									"dsTable": "gbqColumn"
								}
							}
						]
					},
					{
						"name": "IfDataWasLoaded",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Loop Batches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Get_RowCountQueries').output.value[0].TableList, null))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessSilver",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsDatabricksNotebookPath",
											"type": "Expression"
										},
										"baseParameters": {
											"TableList": {
												"value": "@if(greater(activity('Get_RowCountQueries').output.value[0].numBatches, 0), \nactivity('Get_RowCountQueries').output.value[0].TableList, 'nothing,to,do,at,this,time')\n",
												"type": "Expression"
											},
											"StorageAccount": {
												"value": "@activity('Get Pipeline Parameters').output.firstRow.SinkdsStorageAccount",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzDatabricksJobCluster",
										"type": "LinkedServiceReference",
										"parameters": {
											"lsWorkspaceUrl": {
												"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsDatabricksWorkspaceUrl",
												"type": "Expression"
											},
											"lsWorkspaceResourceId": {
												"value": "@activity('Get Pipeline Parameters').output.firstRow.SourcedsDatabricksWorkspaceId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Pipeline Parameters",
						"description": "Use GetWatermark to get environment specific parameter values (key vault, storage account, etc.)",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.GetWatermark",
								"storedProcedureParameters": {
									"BatchName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.BatchName",
											"type": "Expression"
										}
									},
									"SourceServiceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceServiceType",
											"type": "Expression"
										}
									},
									"SinkServiceType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SinkServiceType",
											"type": "Expression"
										}
									},
									"Environment": {
										"type": "String",
										"value": {
											"value": "@pipeline().globalParameters.gpEnvironment",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BatchRowLimit": {
						"type": "int",
						"defaultValue": 1000000
					},
					"DataAgeLimitHours": {
						"type": "int",
						"defaultValue": 24
					},
					"BatchName": {
						"type": "string",
						"defaultValue": "Google Analytics to datalakehouse"
					},
					"SourceServiceType": {
						"type": "string",
						"defaultValue": "Pipeline_getGoogleAnalytics"
					},
					"SinkServiceType": {
						"type": "string",
						"defaultValue": "Pipeline_getGoogleAnalytics"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GoogleBigQueryDirect')]",
				"[concat(variables('factoryId'), '/datasets/LoadControlTable')]",
				"[concat(variables('factoryId'), '/datasets/WatermarkMI')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabaseMI')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKVFile')]",
				"[concat(variables('factoryId'), '/linkedServices/AzDatabricksJobCluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getMMS_PO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Bronze Data Ingestion MMS\n\nDataset to Linked Service mapping:\n\nWarkmarkMI: GenericAzureSqlDatabaseMI\n\nDb2KV: GenericDB2\n\nDLBronzeParquetKVFile: GenericAzureDataLakeStorageGen2KV",
				"activities": [
					{
						"name": "Set varWatermarkTimestamp",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "varWatermarkTimestamp",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Watermark List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.GetWatermark",
								"storedProcedureParameters": {
									"BatchName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.prmLCBatchName",
											"type": "Expression"
										}
									},
									"SourceServiceType": {
										"type": "String",
										"value": {
											"value": "@variables('varSourceServiceType')",
											"type": "Expression"
										}
									},
									"SinkServiceType": {
										"type": "String",
										"value": {
											"value": "@variables('varSinkServiceType')",
											"type": "Expression"
										}
									},
									"Environment": {
										"type": "String",
										"value": {
											"value": "@pipeline().globalParameters.gpEnvironment",
											"type": "Expression"
										}
									},
									"RollingDays": {
										"type": "Decimal",
										"value": "0.0"
									},
									"WatermarkTimestamp": {
										"type": "Datetime",
										"value": "1901-01-01"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@pipeline().globalParameters.gpWMSQL",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@pipeline().globalParameters.gpWMDatabase",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Watermark List",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set varWatermarkTimestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Watermark List').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Watermark Override Is True",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Copy By Batch Type",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(pipeline().parameters.prmWatermarkOverride, true)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Update Watermark",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabaseMI",
													"type": "LinkedServiceReference",
													"parameters": {
														"lsServerName": {
															"value": "@pipeline().globalParameters.gpWMSQL",
															"type": "Expression"
														},
														"lsDatabaseName": {
															"value": "@pipeline().globalParameters.gpWMDatabase",
															"type": "Expression"
														}
													}
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('UPDATE dbo.Watermark SET SourceWatermarkFieldValue = ''', formatDateTime(variables('varWatermarkTimestamp'), 'yyyy-MM-dd HH:mm:ss'), ''' WHERE Id = ', string(item().WatermarkId))\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										]
									}
								},
								{
									"name": "Copy By Batch Type",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().BatchType",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Full",
												"activities": [
													{
														"name": "Copy MMS to ADL",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{item().SourceObjectName}"
															},
															{
																"name": "Destination",
																"value": "@{item().SinkdsFileSystem}/@{concat(item().SinkdsDirectory, '/', item().SourceName, '/', item().SinkObjectName, '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'yyyy'),formatDateTime(variables('varWatermarkTimestamp'), 'yyyy')), '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'MM'),formatDateTime(variables('varWatermarkTimestamp'), 'MM')), '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'dd'),formatDateTime(variables('varWatermarkTimestamp'), 'dd')))}/@{concat(item().SinkdsFileName, '.parquet')}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "Db2Source",
																"query": {
																	"value": "@{if(equals(item().SourceQuery, null), concat('SELECT * FROM ', item().SourceObjectName, ' with UR'), item().SourceQuery)}\n",
																	"type": "Expression"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "Db2KV",
																"type": "DatasetReference",
																"parameters": {
																	"dsKVBaseURL": {
																		"value": "@item().SourcedsKVBaseURL",
																		"type": "Expression"
																	},
																	"dsSecretName": {
																		"value": "@item().SourcedsSecretName",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DLBronzeParquetKVFile",
																"type": "DatasetReference",
																"parameters": {
																	"dsURL": {
																		"value": "@item().SinkdsURL",
																		"type": "Expression"
																	},
																	"dsSecretName": {
																		"value": "@item().SinkdsSecretName",
																		"type": "Expression"
																	},
																	"dsFileSystem": {
																		"value": "@item().SinkdsFileSystem",
																		"type": "Expression"
																	},
																	"dsDirectory": {
																		"value": "@concat(item().SinkdsDirectory, '/', item().SourceName, '/', item().SinkObjectName, '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'yyyy'),formatDateTime(variables('varWatermarkTimestamp'), 'yyyy')), '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'MM'),formatDateTime(variables('varWatermarkTimestamp'), 'MM')), '/', if(equals(pipeline().parameters.prmWatermarkOverride,true), formatDateTime(pipeline().parameters.prmOverrideEndDate, 'dd'),formatDateTime(variables('varWatermarkTimestamp'), 'dd')))",
																		"type": "Expression"
																	},
																	"dsFileName": {
																		"value": "@concat(item().SinkdsFileName, '.parquet')",
																		"type": "Expression"
																	},
																	"dsKVBaseURL": {
																		"value": "@item().SinkdsKVBaseURL",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"prmLCBatchName": {
						"type": "string",
						"defaultValue": "MMS_QA PO to DLBronzeParquet entdatalakehouse"
					},
					"prmWatermarkOverride": {
						"type": "bool",
						"defaultValue": false
					},
					"prmOverrideStartDate": {
						"type": "string"
					},
					"prmOverrideEndDate": {
						"type": "string"
					}
				},
				"variables": {
					"varWatermarkTimestamp": {
						"type": "String"
					},
					"varSourceServiceType": {
						"type": "String",
						"defaultValue": "Db2KV"
					},
					"varSinkServiceType": {
						"type": "String",
						"defaultValue": "DLBronzeParquetKVFile"
					}
				},
				"folder": {
					"name": "Data Lake"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-19T21:05:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkMI')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabaseMI')]",
				"[concat(variables('factoryId'), '/datasets/Db2KV')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKVFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scratchpad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Just hacking around",
				"activities": [
					{
						"name": "ListTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select top 5 TableName, BatchId, SubBatchId\nfrom dbo.gbqWatermark\nwhere SubBatchId is not null\nunion all\nselect top 5 TableName, BatchId, SubBatchId\nfrom dbo.gbqWatermark\nwhere SubBatchId is null",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "customers",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DoSomeStuffForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WriteSomething",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Something",
											"value": "@{concat(item().BatchId, '.', item().SubBatchId)}"
										},
										{
											"name": "NullCheck",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"variableName": "Something",
										"value": {
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Something": {
						"type": "String",
						"defaultValue": "uninit"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDLStorePq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzDLStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*",
						"folderPath": "bronze/flooranddecor.my.salesforce.com/Case/2023/10/26",
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Id",
						"type": "UTF8"
					},
					{
						"name": "IsDeleted",
						"type": "BOOLEAN"
					},
					{
						"name": "MasterRecordId",
						"type": "UTF8"
					},
					{
						"name": "CaseNumber",
						"type": "UTF8"
					},
					{
						"name": "ContactId",
						"type": "UTF8"
					},
					{
						"name": "AccountId",
						"type": "UTF8"
					},
					{
						"name": "AssetId",
						"type": "UTF8"
					},
					{
						"name": "ProductId",
						"type": "UTF8"
					},
					{
						"name": "EntitlementId",
						"type": "UTF8"
					},
					{
						"name": "SourceId",
						"type": "UTF8"
					},
					{
						"name": "BusinessHoursId",
						"type": "UTF8"
					},
					{
						"name": "ParentId",
						"type": "UTF8"
					},
					{
						"name": "SuppliedName",
						"type": "UTF8"
					},
					{
						"name": "SuppliedEmail",
						"type": "UTF8"
					},
					{
						"name": "SuppliedPhone",
						"type": "UTF8"
					},
					{
						"name": "SuppliedCompany",
						"type": "UTF8"
					},
					{
						"name": "Type",
						"type": "UTF8"
					},
					{
						"name": "RecordTypeId",
						"type": "UTF8"
					},
					{
						"name": "Status",
						"type": "UTF8"
					},
					{
						"name": "Reason",
						"type": "UTF8"
					},
					{
						"name": "Origin",
						"type": "UTF8"
					},
					{
						"name": "Language",
						"type": "UTF8"
					},
					{
						"name": "Subject",
						"type": "UTF8"
					},
					{
						"name": "Priority",
						"type": "UTF8"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "IsClosed",
						"type": "BOOLEAN"
					},
					{
						"name": "ClosedDate",
						"type": "INT96"
					},
					{
						"name": "IsEscalated",
						"type": "BOOLEAN"
					},
					{
						"name": "OwnerId",
						"type": "UTF8"
					},
					{
						"name": "IsClosedOnCreate",
						"type": "BOOLEAN"
					},
					{
						"name": "SlaStartDate",
						"type": "INT96"
					},
					{
						"name": "SlaExitDate",
						"type": "INT96"
					},
					{
						"name": "IsStopped",
						"type": "BOOLEAN"
					},
					{
						"name": "StopStartDate",
						"type": "INT96"
					},
					{
						"name": "CreatedDate",
						"type": "INT96"
					},
					{
						"name": "CreatedById",
						"type": "UTF8"
					},
					{
						"name": "LastModifiedDate",
						"type": "INT96"
					},
					{
						"name": "LastModifiedById",
						"type": "UTF8"
					},
					{
						"name": "SystemModstamp",
						"type": "INT96"
					},
					{
						"name": "ContactPhone",
						"type": "UTF8"
					},
					{
						"name": "ContactMobile",
						"type": "UTF8"
					},
					{
						"name": "ContactEmail",
						"type": "UTF8"
					},
					{
						"name": "ContactFax",
						"type": "UTF8"
					},
					{
						"name": "Comments",
						"type": "UTF8"
					},
					{
						"name": "LastViewedDate",
						"type": "INT96"
					},
					{
						"name": "LastReferencedDate",
						"type": "INT96"
					},
					{
						"name": "MilestoneStatus",
						"type": "UTF8"
					},
					{
						"name": "Damage_Location__c",
						"type": "UTF8"
					},
					{
						"name": "Follow_up_Needed__c",
						"type": "UTF8"
					},
					{
						"name": "Satisfaction_Comment__c",
						"type": "UTF8"
					},
					{
						"name": "Satisfaction_Reason__c",
						"type": "UTF8"
					},
					{
						"name": "Satisfaction_Score__c",
						"type": "UTF8"
					},
					{
						"name": "Duplicate__c",
						"type": "BOOLEAN"
					},
					{
						"name": "ZendeskTicketId__c",
						"type": "UTF8"
					},
					{
						"name": "Attorney_Name__c",
						"type": "UTF8"
					},
					{
						"name": "Auto_Response_Day_or_Hours__c",
						"type": "UTF8"
					},
					{
						"name": "Bypass_Validation_Rules__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Call_Chat_Email_Reason__c",
						"type": "UTF8"
					},
					{
						"name": "Calling_Location__c",
						"type": "UTF8"
					},
					{
						"name": "Cause__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Notes__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Open_Date__c",
						"type": "INT96"
					},
					{
						"name": "Claim_Resolution__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Status__c",
						"type": "UTF8"
					},
					{
						"name": "Claims_First_Response__c",
						"type": "INT96"
					},
					{
						"name": "ConcessionAmount__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "ConcessionType__c",
						"type": "UTF8"
					},
					{
						"name": "Contact_Me_Store__c",
						"type": "UTF8"
					},
					{
						"name": "Contact_Us_Reason__c",
						"type": "UTF8"
					},
					{
						"name": "Credit_Memo_Date__c",
						"type": "INT96"
					},
					{
						"name": "Current_User_Role__c",
						"type": "UTF8"
					},
					{
						"name": "Customer_Preferred_Store__c",
						"type": "UTF8"
					},
					{
						"name": "Customer_Preferred_Store_t__c",
						"type": "UTF8"
					},
					{
						"name": "Department__c",
						"type": "UTF8"
					},
					{
						"name": "Escalated_Issue__c",
						"type": "UTF8"
					},
					{
						"name": "F_D_Inspection_Expense__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "F_D_Paid__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "First_Response_Time__c",
						"type": "INT96"
					},
					{
						"name": "Fulfilling_Location__c",
						"type": "UTF8"
					},
					{
						"name": "Inspection_Report__c",
						"type": "UTF8"
					},
					{
						"name": "Inspector__c",
						"type": "UTF8"
					},
					{
						"name": "IssueDetail__c",
						"type": "UTF8"
					},
					{
						"name": "Last_Activity_Date__c",
						"type": "INT96"
					},
					{
						"name": "Last_Activity_Role__c",
						"type": "UTF8"
					},
					{
						"name": "Manufacturer__c",
						"type": "UTF8"
					},
					{
						"name": "OrderNumber__c",
						"type": "UTF8"
					},
					{
						"name": "PRO__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Parent_Case_Resolution__c",
						"type": "UTF8"
					},
					{
						"name": "Parent_Concession_Amount__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Parent_Concession_Type__c",
						"type": "UTF8"
					},
					{
						"name": "Preferred_Method_of_Contact__c",
						"type": "UTF8"
					},
					{
						"name": "Professional_Install__c",
						"type": "UTF8"
					},
					{
						"name": "Projected_Close_Date__c",
						"type": "INT96"
					},
					{
						"name": "Projected_F_D_Payout__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Promoted__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Region__c",
						"type": "UTF8"
					},
					{
						"name": "Resolution__c",
						"type": "UTF8"
					},
					{
						"name": "Owner_Role__c",
						"type": "UTF8"
					},
					{
						"name": "SKU__c",
						"type": "UTF8"
					},
					{
						"name": "Sales_Audit_Response__c",
						"type": "UTF8"
					},
					{
						"name": "Settlement_Amount__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Settlement_Date__c",
						"type": "INT96"
					},
					{
						"name": "Solved_Date__c",
						"type": "INT96"
					},
					{
						"name": "Sub_Department__c",
						"type": "UTF8"
					},
					{
						"name": "Survey_Sent__c",
						"type": "BOOLEAN"
					},
					{
						"name": "TransactionID__c",
						"type": "UTF8"
					},
					{
						"name": "Vendor_Approved_Credit__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Vendor_Paid_Direct__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Vendor_Paid__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Web_Order_Number__c",
						"type": "UTF8"
					},
					{
						"name": "customernumber__c",
						"type": "UTF8"
					},
					{
						"name": "Child_SKU__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Customer_Name__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Issue__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Region__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Store__c",
						"type": "UTF8"
					},
					{
						"name": "Family_SKU__c",
						"type": "UTF8"
					},
					{
						"name": "Law_Firm__c",
						"type": "UTF8"
					},
					{
						"name": "SKU_Description__c",
						"type": "UTF8"
					},
					{
						"name": "Vendor_SKU__c",
						"type": "UTF8"
					},
					{
						"name": "Contact_Account__c",
						"type": "UTF8"
					},
					{
						"name": "Date_Assigned_to_Queue__c",
						"type": "INT96"
					},
					{
						"name": "Case_Age_in_Hours__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Last_Owned_By__c",
						"type": "UTF8"
					},
					{
						"name": "Owner_Name__c",
						"type": "UTF8"
					},
					{
						"name": "Action_Required__c",
						"type": "UTF8"
					},
					{
						"name": "Time_in_Queue__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "CCM_upload__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Date_Sent_to_Buyer_Vendor__c",
						"type": "INT96"
					},
					{
						"name": "Date_Response_Received_from_Buyer_Vendor__c",
						"type": "INT96"
					},
					{
						"name": "Vendor_Response_Time_Hours__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "First_Call_Resolution__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Claim_Closed_Date__c",
						"type": "INT96"
					},
					{
						"name": "Claim_Open_Date_Formula__c",
						"type": "INT96"
					},
					{
						"name": "Marked_for_Review__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Macro_Run__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Parent_EmailMessage__c",
						"type": "UTF8"
					},
					{
						"name": "Owner_User_Id__c",
						"type": "UTF8"
					},
					{
						"name": "Owner_was_CC_Sales_Audit__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Date_Assigned_to_CC_Sales_Audit_Queue2__c",
						"type": "INT96"
					},
					{
						"name": "Time_in_Queue_hours_Fraud_Prevention__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Email_received__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Number_of_Attempts__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Check_Amount_from_Accounting__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Vendor_Collected_Date__c",
						"type": "INT96"
					},
					{
						"name": "Vendor_Collected__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Vendor_Committed_Date__c",
						"type": "INT96"
					},
					{
						"name": "Settlement_Amount2__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "F_D_Paid2__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Article_Feedback__c",
						"type": "UTF8"
					},
					{
						"name": "Date_ReOpened__c",
						"type": "INT96"
					},
					{
						"name": "of_ReOpens__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Data_Quality_Description__c",
						"type": "UTF8"
					},
					{
						"name": "Data_Quality_Score__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Purged__c",
						"type": "BOOLEAN"
					},
					{
						"name": "PCCC_DM__DSAR_Status__c",
						"type": "UTF8"
					},
					{
						"name": "PCCC_DM__DSAR_Type__c",
						"type": "UTF8"
					},
					{
						"name": "PCCC_DM__Data_Subject__c",
						"type": "UTF8"
					},
					{
						"name": "CCPACaseRetrieval__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Case_Related_Store__c",
						"type": "UTF8"
					},
					{
						"name": "First_Response_Expired__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Carrier_Claim_Status__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Status_Text__c",
						"type": "UTF8"
					},
					{
						"name": "Date_Submitted_to_Re_Shipped_Store__c",
						"type": "INT96"
					},
					{
						"name": "Delivery_Zip_Code__c",
						"type": "UTF8"
					},
					{
						"name": "Re_Shipped_Store__c",
						"type": "UTF8"
					},
					{
						"name": "Chat_Description__c",
						"type": "UTF8"
					},
					{
						"name": "Settlement_AmountNew__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Shipping_Carrier_Details__c",
						"type": "UTF8"
					},
					{
						"name": "Shipping_Carrier__c",
						"type": "UTF8"
					},
					{
						"name": "Shipping_Cost__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Last_Changed_Owner_Time__c",
						"type": "INT96"
					},
					{
						"name": "Fraud_Indicator__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Pro_Name__c",
						"type": "UTF8"
					},
					{
						"name": "Issue_Detail_CCT__c",
						"type": "UTF8"
					},
					{
						"name": "Claim_Other__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Customer_Request__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Gift_Card__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Store_Commit__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Vendor_Recommended__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Estimated_Installation_Cost__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Estimated_Sq_Ft__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "First_Owner_Assignment_Date__c",
						"type": "INT96"
					},
					{
						"name": "Install_Date__c",
						"type": "INT96"
					},
					{
						"name": "First_Case_Owner_Assignment_Date__c",
						"type": "INT96"
					},
					{
						"name": "First_Chat_Owner_Assignment_Date__c",
						"type": "INT96"
					},
					{
						"name": "SKU_Cost__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "SKU_Quantities__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Department2__c",
						"type": "UTF8"
					},
					{
						"name": "Sub_Department2__c",
						"type": "UTF8"
					},
					{
						"name": "SKU_Weight__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Total_Weight__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Current_Date_for_RR__c",
						"type": "INT96"
					},
					{
						"name": "RR_Payment_Type__c",
						"type": "UTF8"
					},
					{
						"name": "Refund__c",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "IngestionSource",
						"type": "UTF8"
					},
					{
						"name": "IngestionEnvironment",
						"type": "UTF8"
					},
					{
						"name": "IngestionWatermarkOverride",
						"type": "UTF8"
					},
					{
						"name": "IngestionStartDate",
						"type": "UTF8"
					},
					{
						"name": "IngestionEndDate",
						"type": "UTF8"
					},
					{
						"name": "IngestionPipeline",
						"type": "UTF8"
					},
					{
						"name": "IngestionPipelineRunId",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzDLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzPq')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzDLStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsFilesystem": {
						"type": "string"
					},
					"dsPath": {
						"type": "string"
					},
					"dsFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().dsFilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dsPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsFilesystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzDLStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSqlDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"serverName": "sql-ab092898.database.windows.net",
						"dbName": "txn"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "sys",
					"table": "tables"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSqlDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"serverName": {
							"value": "@dataset().sqlFqdn",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "PersonFlexible"
					},
					"sqlFqdn": {
						"type": "string",
						"defaultValue": "sql-ab092898.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "txn"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSqlDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLBronzeParquetKV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Datalake accessed via Key Vault\nBronze layer \nFolder level",
				"linkedServiceName": {
					"referenceName": "GenericAzureDataLakeStorageGen2KV",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsURL": {
							"value": "@dataset().dsURL",
							"type": "Expression"
						},
						"lsSecretName": {
							"value": "@dataset().dsSecretName",
							"type": "Expression"
						},
						"lsKVBaseURL": {
							"value": "@dataset().dsKVBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsURL": {
						"type": "string"
					},
					"dsSecretName": {
						"type": "string"
					},
					"dsFileSystem": {
						"type": "string"
					},
					"dsDirectory": {
						"type": "string"
					},
					"dsKVBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().dsDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsFileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureDataLakeStorageGen2KV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DLBronzeParquetKVFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Datalake accessed via Key Vault\nBronze layer \nSpecific parquet file",
				"linkedServiceName": {
					"referenceName": "GenericAzureDataLakeStorageGen2KV",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsURL": {
							"value": "@dataset().dsURL",
							"type": "Expression"
						},
						"lsSecretName": {
							"value": "@dataset().dsSecretName",
							"type": "Expression"
						},
						"lsKVBaseURL": {
							"value": "@dataset().dsKVBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsURL": {
						"type": "string"
					},
					"dsSecretName": {
						"type": "string"
					},
					"dsFileSystem": {
						"type": "string"
					},
					"dsDirectory": {
						"type": "string"
					},
					"dsFileName": {
						"type": "string"
					},
					"dsKVBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().dsFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().dsDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsFileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureDataLakeStorageGen2KV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Db2KV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericDB2",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsKVBaseURL": {
							"value": "@dataset().dsKVBaseURL",
							"type": "Expression"
						},
						"lsSecretName": {
							"value": "@dataset().dsSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsKVBaseURL": {
						"type": "string"
					},
					"dsSecretName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": ""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericDB2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleBigQueryDirect')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GoogleBigQueryDirect",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsBaseURL": {
							"value": "@dataset().dsBaseURL",
							"type": "Expression"
						},
						"lsSecretName": {
							"value": "@dataset().dsSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsBaseURL": {
						"type": "string",
						"defaultValue": "https://akv-ab092898.vault.azure.net/"
					},
					"dsSecretName": {
						"type": "string",
						"defaultValue": "gbq-fnd-cloud-project"
					}
				},
				"annotations": [],
				"type": "GoogleBigQueryV2Object",
				"schema": [],
				"typeProperties": {
					"dataset": "runtime",
					"table": "dynamic"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GoogleBigQueryDirect')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabaseMI",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsServerName": {
							"value": "@dataset().dsServerName",
							"type": "Expression"
						},
						"lsDatabaseName": {
							"value": "@dataset().dsDatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsServerName": {
						"type": "string"
					},
					"dsDatabaseName": {
						"type": "string"
					},
					"dsSchema": {
						"type": "string"
					},
					"dsTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().dsSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().dsTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabaseMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On premise SQL Server, named table.",
				"linkedServiceName": {
					"referenceName": "OnpremSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"serverFqdn": {
							"value": "@dataset().sqlFqdn",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "customer"
					},
					"sqlFqdn": {
						"type": "string",
						"defaultValue": "localhost\\ACB"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "SevenLetterTees"
					},
					"userName": {
						"type": "string",
						"defaultValue": "AB092898@flooranddecor.com"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnpremSqlDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkMI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabaseMI",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsServerName": {
							"value": "@dataset().dsServerName",
							"type": "Expression"
						},
						"lsDatabaseName": {
							"value": "@dataset().dsDatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsServerName": {
						"type": "string"
					},
					"dsDatabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabaseMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDLStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzDLStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzDLStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDatabricksJobCluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsWorkspaceUrl": {
						"type": "string",
						"defaultValue": "https://adb-7286372339506263.3.azuredatabricks.net"
					},
					"lsWorkspaceResourceId": {
						"type": "string",
						"defaultValue": "/subscriptions/4c87027a-d0a7-4f47-b9c4-31447460fbef/resourceGroups/rg-sbx-ab092898/providers/Microsoft.Databricks/workspaces/dbx-sbx-ab092898"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "@linkedService().lsWorkspaceUrl",
					"authentication": "MSI",
					"workspaceResourceId": "@linkedService().lsWorkspaceResourceId",
					"newClusterNodeType": "Standard_DS4_v2",
					"newClusterNumOfWorker": "1:4",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "14.3.x-scala2.12",
					"clusterOption": "Autoscaling",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDeltalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-7286372339506263.3.azuredatabricks.net",
					"clusterId": "0304-190420-v9fjlpxf",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "dbxAccessToken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSqlDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"serverName": {
						"type": "string",
						"defaultValue": "sql-ab092898.database.windows.net"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "txn"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzSqlDb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureDataLakeStorageGen2KV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsURL": {
						"type": "string"
					},
					"lsSecretName": {
						"type": "string"
					},
					"lsKVBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('GenericAzureDataLakeStorageGen2KV_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "GenericAzureKeyVaultMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsBaseURL": {
									"value": "@linkedService().lsKVBaseURL",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "@linkedService().lsSecretName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureKeyVaultMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureKeyVaultMI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('GenericAzureKeyVaultMI_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSqlDatabaseMI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsServerName": {
						"type": "string"
					},
					"lsDatabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('GenericAzureSqlDatabaseMI_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericDB2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsKVBaseURL": {
						"type": "string",
						"defaultValue": "https://akv-ab092898.vault.azure.net/"
					},
					"lsSecretName": {
						"type": "string",
						"defaultValue": "qa-conn-string-mms"
					}
				},
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "GenericAzureKeyVaultMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsBaseURL": {
									"value": "@linkedService().lsKVBaseURL",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "[parameters('GenericDB2_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "shirt-ACB",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shirt-ACB')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureKeyVaultMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSFTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsHost": {
						"type": "string",
						"defaultValue": "10.247.96.8"
					},
					"lsUserName": {
						"type": "string",
						"defaultValue": "foundation_dw "
					},
					"lsKVBaseURL": {
						"type": "string",
						"defaultValue": "https://akv-ab092898.vault.azure.net/"
					},
					"lsSecretName": {
						"type": "string",
						"defaultValue": "foundation-sftp-pwd"
					}
				},
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('GenericSFTP_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('GenericSFTP_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "GenericAzureKeyVaultMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsBaseURL": {
									"value": "@linkedService().lsKVBaseURL",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "@linkedService().lsSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "shirt-ACB",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shirt-ACB')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureKeyVaultMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleBigQuery')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GoogleBigQuery",
				"typeProperties": {
					"project": "fnd-cloud-project",
					"requestGoogleDriveScope": false,
					"authenticationType": "ServiceAuthentication",
					"email": "ga4-access@fnd-cloud-project.iam.gserviceaccount.com",
					"keyFilePath": "C:\\source\\keys\\fnd-cloud-project-b2a8d27db4f3.json",
					"trustedCertPath": "",
					"useSystemTrustStore": false
				},
				"connectVia": {
					"referenceName": "shirt-ACB",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shirt-ACB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleBigQueryDirect')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"lsBaseURL": {
						"type": "string",
						"defaultValue": "https://akv-ab092898.vault.azure.net/"
					},
					"lsSecretName": {
						"type": "string",
						"defaultValue": "gbq-fnd-cloud-project"
					}
				},
				"annotations": [],
				"type": "GoogleBigQueryV2",
				"typeProperties": {
					"projectId": "fnd-cloud-project",
					"authenticationType": "ServiceAuthentication",
					"keyFileContent": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "GenericAzureKeyVaultMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsBaseURL": {
									"value": "@linkedService().lsBaseURL",
									"type": "Expression"
								}
							}
						},
						"secretName": {
							"value": "@linkedService().lsSecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "suckLess",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/suckLess')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureKeyVaultMI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnpremSqlDb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"serverFqdn": {
						"type": "string",
						"defaultValue": "localhost\\ACB"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					},
					"userName": {
						"type": "string",
						"defaultValue": "ab092898@flooranddecor.com"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('OnpremSqlDb_connectionString')]",
					"userName": "[parameters('OnpremSqlDb_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "WinAuthPwd"
					}
				},
				"connectVia": {
					"referenceName": "shirt-ACB",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/shirt-ACB')]",
				"[concat(variables('factoryId'), '/linkedServices/AzKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"baseUrl": {
						"type": "string",
						"defaultValue": "https://purview-test-data-catalog.purview.azure.com/catalog"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestApi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sfdc')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"userName": {
						"type": "string",
						"defaultValue": "fred"
					},
					"sfdcPwdSecret": {
						"type": "string",
						"defaultValue": "sfdcPwd"
					},
					"sfdcTokenSecret": {
						"type": "string",
						"defaultValue": "sfdcToken"
					},
					"sfdcApiVersion": {
						"type": "string",
						"defaultValue": "52.0"
					}
				},
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "[parameters('sfdc_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('sfdc_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().sfdcPwdSecret",
							"type": "Expression"
						}
					},
					"securityToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().sfdcTokenSecret",
							"type": "Expression"
						}
					},
					"apiVersion": "@{linkedService().sfdcApiVersion}"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schRunPipelines')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scheduled trigger to run one or more pipelines (POC)",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SchemaDriftTest",
							"type": "PipelineReference"
						},
						"parameters": {
							"plSourceSchema": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plSourceSchema')]",
							"plSourceTable": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plSourceTable')]",
							"plTargetSchema": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetSchema')]",
							"plTargetTableRigid": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableRigid')]",
							"plTargetTableFlexible": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableFlexible')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-11-10T18:03:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SchemaDriftTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg-1430-utc')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-01-27T14:30:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shirt-ACB')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "Self-hosted integration runtime operating on Carter Burleigh's laptop",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/suckLess')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US 2",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}