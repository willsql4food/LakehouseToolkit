{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-sbx-ab092898"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plSourceSchema": {
			"type": "string",
			"defaultValue": "stage"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plSourceTable": {
			"type": "string",
			"defaultValue": "PersonC"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetSchema": {
			"type": "string",
			"defaultValue": "dbo"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableRigid": {
			"type": "string",
			"defaultValue": "PersonRigid"
		},
		"schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableFlexible": {
			"type": "string",
			"defaultValue": "PersonFlexible"
		},
		"trg-1430-utc_properties_getGoogleAnalytics_onPrem_LoadControl_parameters_BatchRowLimit": {
			"type": "int",
			"defaultValue": 1000000
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DLBronzeParquetKV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureDataLakeStorageGen2KV",
					"type": "LinkedServiceReference",
					"parameters": {
						"lsURL": {
							"value": "@dataset().dsURL",
							"type": "Expression"
						},
						"lsSecretName": {
							"value": "@dataset().dsSecretName",
							"type": "Expression"
						},
						"lsKVBaseURL": {
							"value": "@dataset().dsKVBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dsURL": {
						"type": "string"
					},
					"dsSecretName": {
						"type": "string"
					},
					"dsFileSystem": {
						"type": "string"
					},
					"dsDirectory": {
						"type": "string"
					},
					"dsFileName": {
						"type": "string"
					},
					"dsKVBaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().dsDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().dsFileSystem",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleBigQueryFND')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GoogleBigQuery",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "GoogleBigQueryObject",
				"schema": [],
				"typeProperties": {
					"dataset": "dw_mirror",
					"table": "messages"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GoogleBigQueryMirror')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GoogleBigQueryMirror",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "GoogleBigQueryObject",
				"schema": [],
				"typeProperties": {
					"dataset": "dw_mirror",
					"table": "messages"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "On premise SQL Server, named table.",
				"linkedServiceName": {
					"referenceName": "OnpremSqlDb",
					"type": "LinkedServiceReference",
					"parameters": {
						"serverFqdn": {
							"value": "@dataset().sqlFqdn",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						},
						"userName": {
							"value": "@dataset().userName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "customer"
					},
					"sqlFqdn": {
						"type": "string",
						"defaultValue": "localhost\\ACB"
					},
					"dbName": {
						"type": "string",
						"defaultValue": "SevenLetterTees"
					},
					"userName": {
						"type": "string",
						"defaultValue": "AB092898@flooranddecor.com"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DL to OnPremSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzDLStorePq",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "Case",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "SevenLetterTees",
									"userName": "AB092898@flooranddecor.com"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getGoogleAnalytics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop Batches",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_gbqLoadBatches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_gbqLoadBatches').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "BatchToParquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 300,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "DestFile",
											"value": "@{item().FileName}"
										},
										{
											"name": "Query",
											"value": "@{item().SelectCmd}"
										},
										{
											"name": "TableName",
											"value": "@{item().TableName}"
										},
										{
											"name": "Batch",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "GoogleBigQuerySource",
											"query": {
												"value": "@item().SelectCmd",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GoogleBigQueryFND",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DLBronzeParquetKV",
											"type": "DatasetReference",
											"parameters": {
												"dsURL": "https://sadevdatalakehouse.dfs.core.windows.net",
												"dsSecretName": "sas-key-sadatalakehouse",
												"dsFileSystem": "datalake",
												"dsDirectory": {
													"value": "bronze/GoogleAnalytics/@{item().FilePath}",
													"type": "Expression"
												},
												"dsFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"dsKVBaseURL": "https://akv-ab092898.vault.azure.net/"
											}
										}
									]
								},
								{
									"name": "LogFinish",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "BatchToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabaseMI",
										"type": "LinkedServiceReference",
										"parameters": {
											"lsServerName": {
												"value": "@variables('varLCSQLServer')",
												"type": "Expression"
											},
											"lsDatabaseName": {
												"value": "@variables('varLCSQLDatabase')",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update  dbo.gbqWatermark\nset     LoadedDateUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        DestinationUri = 'datalake/bronze/@{item().FilePath}/@{item().FileName}',\n        RowCountDest = @{activity('BatchToParquet').output.rowsCopied} \nwhere   TableCatalog = '@{item().TableCatalog}'\n    and TableSchema = '@{item().TableSchema}'\n    and TableName = '@{item().TableName}'\n    and BatchId = @{item().BatchId}\n    @{if(equals(item().SubBatchId, null), '', concat(' and SubBatchId = ', item().SubBatchId))}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Get_gbqObject",
						"description": "Get all objects available in GBQ and stage them in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogJobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQuerySource",
								"query": "select   t.table_catalog as TableCatalog, \n            t.table_schema as TableSchema, \n            t.table_name as TableName\nFROM  `region-us`.INFORMATION_SCHEMA.TABLES t\n"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from [stage].[gbqObject]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryFND",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObject"
								}
							}
						]
					},
					{
						"name": "Get_gbqLoadBatches",
						"description": "Get the final list of batches to load, their file paths and names.\nFeed this to a load loop.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "dbo.uspGetGbqLoadBatches",
								"storedProcedureParameters": {
									"PipelineExecutionId": {
										"type": "Int32",
										"value": {
											"value": "@{activity('LogJobStart').output.value[0].Id}",
											"type": "Expression"
										}
									},
									"RowsLimit": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.BatchRowLimit",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_RowCountQueries",
						"description": "Builds a set of queries to find the row count in each Google object not yet loaded.  Applies Batch to objects anticipated to exceed query return limit imposed by Google (1M rows as of 2024-01)",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": " select count(*) numBatches, string_agg(CountCmd, ' union all ') CountCmd from dbo.gbqObjectToLoadCmd",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqObjectDetail",
						"description": "Execute query and store results in stage table in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_RowCountQueries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQuerySource",
								"query": {
									"value": "@if(greater(activity('Get_RowCountQueries').output.value[0].numBatches, 0), \nactivity('Get_RowCountQueries').output.value[0].CountCmd, 'select ''na'' TableCatalog, ''na'' TableSchema, ''na'' TableName, 0 RowCountSource')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from [stage].[gbqObjectDetail]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryFND",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LoadControlTable",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									},
									"dsSchema": "stage",
									"dsTable": "gbqObjectDetail"
								}
							}
						]
					},
					{
						"name": "LogJobFinish",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Loop Batches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@variables('varLCSQLServer')",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@variables('varLCSQLDatabase')",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = @{activity('Get_RowCountQueries').output.value[0].numBatches},\n        StatusMessage = 'Succeeded'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LogJobStart",
						"description": "Record the Pipeline start in LoadControl and capture the Id of the row for use in auditing.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "insert into dbo.adfPipelineExecution (PipelineName, RunId, StartTimeUtc, StatusMessage)\noutput inserted.Id\nselect '@{pipeline().Pipeline}', '@{pipeline().RunId}', '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}', 'In Progress'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkMI",
								"type": "DatasetReference",
								"parameters": {
									"dsServerName": {
										"value": "@variables('varLCSQLServer')",
										"type": "Expression"
									},
									"dsDatabaseName": {
										"value": "@variables('varLCSQLDatabase')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LogJobFail_GetObjDetail",
						"description": "Log failure at Get_gbqObjectDetail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabaseMI",
							"type": "LinkedServiceReference",
							"parameters": {
								"lsServerName": {
									"value": "@variables('varLCSQLServer')",
									"type": "Expression"
								},
								"lsDatabaseName": {
									"value": "@variables('varLCSQLDatabase')",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = -1,\n        StatusMessage = 'Failed'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BatchRowLimit": {
						"type": "int",
						"defaultValue": 1000000
					}
				},
				"variables": {
					"varLCSQLServer": {
						"type": "String",
						"defaultValue": "sql-ab092898.database.windows.net"
					},
					"varLCSQLDatabase": {
						"type": "String",
						"defaultValue": "LoadControl"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GoogleBigQueryFND')]",
				"[concat(variables('factoryId'), '/datasets/DLBronzeParquetKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getGoogleAnalytics_onPrem_LoadControl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loop Batches",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_gbqLoadBatches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_gbqLoadBatches').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "BatchToParquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 300,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "DestFile",
											"value": "@{item().FileName}"
										},
										{
											"name": "Query",
											"value": "@{item().SelectCmd}"
										},
										{
											"name": "TableName",
											"value": "@{item().TableName}"
										},
										{
											"name": "Batch",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "GoogleBigQuerySource",
											"query": {
												"value": "@item().SelectCmd",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "GoogleBigQueryFND",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzPq",
											"type": "DatasetReference",
											"parameters": {
												"dsFilesystem": "datalake",
												"dsPath": {
													"value": "bronze/GoogleAnalytics/@{item().FilePath}",
													"type": "Expression"
												},
												"dsFilename": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LogFinish",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "BatchToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "OnpremSqlDb",
										"type": "LinkedServiceReference",
										"parameters": {
											"serverFqdn": "localhost\\ACB",
											"dbName": "LoadControl",
											"userName": "ab092898@flooranddecor.com"
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update  dbo.gbqWatermark\nset     LoadedDateUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        DestinationUri = 'datalake/bronze/@{item().FilePath}/@{item().FileName}',\n        RowCountDest = @{activity('BatchToParquet').output.rowsCopied} \nwhere   TableCatalog = '@{item().TableCatalog}'\n    and TableSchema = '@{item().TableSchema}'\n    and TableName = '@{item().TableName}'\n    and BatchId = @{item().BatchId}\n    @{if(equals(item().SubBatchId, null), '', concat(' and SubBatchId = ', item().SubBatchId))}\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Get_gbqObject",
						"description": "Get all objects available in GBQ and stage them in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogJobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQuerySource",
								"query": "select   t.table_catalog as TableCatalog, \n            t.table_schema as TableSchema, \n            t.table_name as TableName\nFROM  `region-us`.INFORMATION_SCHEMA.TABLES t\n"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table stage.gbqObject",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryFND",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "stage",
									"tableName": "gbqObject",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							}
						]
					},
					{
						"name": "Get_gbqLoadBatches",
						"description": "Get the final list of batches to load, their file paths and names.\nFeed this to a load loop.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": {
									"value": "dbo.uspGetGbqLoadBatches",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"PipelineExecutionId": {
										"type": "Int32",
										"value": {
											"value": "@{activity('LogJobStart').output.value[0].Id}",
											"type": "Expression"
										}
									},
									"RowsLimit": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.BatchRowLimit",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "na",
									"tableName": "na",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_RowCountQueries",
						"description": "Builds a set of queries to find the row count in each Google object not yet loaded.  Applies Batch to objects anticipated to exceed query return limit imposed by Google (1M rows as of 2024-01)",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get_gbqObject",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": " select count(*) numBatches, string_agg(CountCmd, ' union all ') CountCmd from dbo.gbqObjectToLoadCmd",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "na",
									"tableName": "na",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get_gbqObjectDetail",
						"description": "Execute query and store results in stage table in Load Control.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get_RowCountQueries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "GoogleBigQuerySource",
								"query": {
									"value": "@if(greater(activity('Get_RowCountQueries').output.value[0].numBatches, 0), \nactivity('Get_RowCountQueries').output.value[0].CountCmd, 'select ''na'' TableCatalog, ''na'' TableSchema, ''na'' TableName, 0 RowCountSource')\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "truncate table stage.gbqObjectDetail",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GoogleBigQueryFND",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "stage",
									"tableName": "gbqObjectDetail",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							}
						]
					},
					{
						"name": "LogJobFinish",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Loop Batches",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OnpremSqlDb",
							"type": "LinkedServiceReference",
							"parameters": {
								"serverFqdn": "localhost\\ACB",
								"dbName": "LoadControl",
								"userName": "ab092898@flooranddecor.com"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = @{activity('Get_RowCountQueries').output.value[0].numBatches},\n        StatusMessage = 'Succeeded'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LogJobStart",
						"description": "Record the Pipeline start in LoadControl and capture the Id of the row for use in auditing.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "insert into dbo.adfPipelineExecution (PipelineName, RunId, StartTimeUtc, StatusMessage)\noutput inserted.Id\nselect '@{pipeline().Pipeline}', '@{pipeline().RunId}', '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}', 'In Progress'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "na",
									"tableName": "na",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LogJobFail_GetObjDetail",
						"description": "Log failure at Get_gbqObjectDetail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get_gbqObjectDetail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OnpremSqlDb",
							"type": "LinkedServiceReference",
							"parameters": {
								"serverFqdn": "localhost\\ACB",
								"dbName": "LoadControl",
								"userName": "ab092898@flooranddecor.com"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update  dbo.adfPipelineExecution \nset     EndTimeUtc = '@{formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss.fff')}',\n        BatchCount = -1,\n        StatusMessage = 'Failed'\nwhere   Id = @{activity('LogJobStart').output.value[0].Id}\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BatchRowLimit": {
						"type": "int",
						"defaultValue": 1000000
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GoogleBigQueryFND')]",
				"[concat(variables('factoryId'), '/datasets/OpSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/scratchpad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Just hacking around",
				"activities": [
					{
						"name": "ListTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select top 5 TableName, BatchId, SubBatchId\nfrom dbo.gbqWatermark\nwhere SubBatchId is not null\nunion all\nselect top 5 TableName, BatchId, SubBatchId\nfrom dbo.gbqWatermark\nwhere SubBatchId is null",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OpSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "customers",
									"sqlFqdn": "localhost\\ACB",
									"dbName": "LoadControl",
									"userName": "AB092898@flooranddecor.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DoSomeStuffForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WriteSomething",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Something",
											"value": "@{concat(item().BatchId, '.', item().SubBatchId)}"
										},
										{
											"name": "NullCheck",
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}"
										}
									],
									"typeProperties": {
										"variableName": "Something",
										"value": {
											"value": "@{concat(item().BatchId, if(equals(item().SubBatchId, null), '', concat('.', item().SubBatchId)))}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Something": {
						"type": "String",
						"defaultValue": "uninit"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OpSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schRunPipelines')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scheduled trigger to run one or more pipelines (POC)",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SchemaDriftTest",
							"type": "PipelineReference"
						},
						"parameters": {
							"plSourceSchema": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plSourceSchema')]",
							"plSourceTable": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plSourceTable')]",
							"plTargetSchema": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetSchema')]",
							"plTargetTableRigid": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableRigid')]",
							"plTargetTableFlexible": "[parameters('schRunPipelines_properties_SchemaDriftTest_parameters_plTargetTableFlexible')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-11-10T18:03:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg-1430-utc')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "getGoogleAnalytics_onPrem_LoadControl",
							"type": "PipelineReference"
						},
						"parameters": {
							"BatchRowLimit": "[parameters('trg-1430-utc_properties_getGoogleAnalytics_onPrem_LoadControl_parameters_BatchRowLimit')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-01-27T14:30:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/getGoogleAnalytics_onPrem_LoadControl')]"
			]
		}
	]
}